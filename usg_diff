#!/usr/bin/python
#from __future__ import print_function
import glob
import io
import ujson
import sys
import pprint
import re

# config sub-trees we never want to be in the result
NeverKeep = (
    ["firewall", "group", "address-group", "unifi_controller_addresses"],
    ["unifi", "mgmt", "cfgversion"],
    ["interfaces", "*", "*", "duplex", "auto"],
    ["interfaces", "*", "*", "speed", "auto"],
    ["service", "dns", "forwarding", "options"], # ["host-record=unifi,.*"]
)

# JSON elements which should always be lists.
ListElements = (
    ["service", "dhcp-server", "global-parameters"],
    ["service", "dhcp-server", "shared-network-name", "*", "subnet", "*", "dns-server"],
)
refcnt = 0


def rmOverrides(jsonobj, removeobj, keys=[]):
  """PerformJSON subtraction.

  Args:
    jsonobj - deserialized JSON object - starting object.
    removeobj - deserialized JSON object - structure to be removed from jsonobj.
    keys - [str]

  Returns:
    The modified JSON object.
  """
  #print 'rmOverrides(%r)' % (keys,)
  if jsonobj and type(removeobj) != type(jsonobj):
    raise TypeError('removeobj = %r != jsonobj = %r at %r' % (
        type(removeobj), type(jsonobj), keys))
  if isinstance(removeobj, dict):
    for k in removeobj:
      if k in jsonobj:
        r = rmOverrides(jsonobj[k], removeobj[k], keys + [k]) 
        if r:
          jsonobj[k] = r
        else:
          del jsonobj[k]
  elif isinstance(removeobj, list):
    for val in removeobj:
      if val in jsonobj:
        jsonobj.remove(val)
  elif jsonobj:
    return None
  return jsonobj


def deepDelete(obj, keys):
  """Delete certain items from a deserialized JSON object.

  Args:
    obj - deserialized JSON object - object from which something will be
      removed.
    keys - [str] - the path to the itemi(s) to be removed.  Note that a
      component may be '*' to iterate across all keys.

  Returns:
    The updated deserialized JSON object.
  """
  #print 'deepDelete(%r, %r)' % (obj, keys)
  if not keys:
    return None
  if len(keys) == 1 and obj == keys[0]:
    return None

  if keys[0] == "*" and isinstance(obj, dict):
    lkeys=[i for i in obj]
  else:
    lkeys=[keys[0]]

  for k in lkeys:
    if k in obj:
      r = deepDelete(obj[k], keys[1:])
      if r:
        obj[k] = r
      else:
        del obj[k]
  return obj


def loadJSON(fname):
  """Load a JSON object from a file or stdin.

  Args:
    fname: str - file name or '-' for stdin.

  Returns:
    A deserialized JSON object.
  """
  def listify(obj, keys):
    """Transform an element into a list."""
    #print 'listify(%r, %r)' % (obj, keys)
    if not keys:
      if isinstance(obj, list):
        return obj
      else:
        return [obj]

    # handle wildcard.
    if keys[0] == "*" and isinstance(obj, dict):
      lkeys=[i for i in obj]
    elif keys[0] in obj:
      lkeys=[keys[0]]
    else:
      return obj

    for k in lkeys:
      obj[k] = listify(obj[k], keys[1:])
      return obj

  if fname == "-":
    fname = '/dev/stdin'

  with io.open(fname, 'r') as f:   
    data_tree = ujson.load(f)

  for lf in ListElements:
    data_tree = listify(data_tree, lf)
  return data_tree



# The main body of this script.
if len(sys.argv) != 4:
  print "usage: %s <system.cfg> <config_gateway.json> <mca_ctrl -tdump-cfg output>"
  sys.exit(1)

system_cfg = loadJSON(sys.argv[1])
gateway_cfg = loadJSON(sys.argv[2])
usg_live_config = loadJSON(sys.argv[3])

# Remove gateway overrides from saved system configuration to get
# the bits which were set via the UI.
ui_cfg = rmOverrides(system_cfg, gateway_cfg)

# Remove UI-generated settings from the live USG config to get
# the settings added by hand.
new_gateway_cfg = rmOverrides(usg_live_config, ui_cfg)

# Clean up remaining bits which are auto-generated.
for subtree in NeverKeep:
  new_gateway_cfg = deepDelete(new_gateway_cfg, subtree)

# Print the results
print '%s' % (ujson.dumps(new_gateway_cfg, sort_keys=True, indent=4),)
